SQLD_오답노트_2025-05-06:
  - 번호: 5
    문제요약: 뷰(View)의 장점
    답: 4 (복잡한 질의 단순화)
    정답: 3 (속도 향상 ❌)
    해설: 뷰는 실제 데이터를 저장하지 않아 보안성과 추상화에 좋지만, 성능은 **오히려 저하**될 수 있음.

  - 번호: 10
    문제요약: 관계대수의 연산이 아닌 것
    답: 2 (조인)
    정답: 3 (정렬 Sort ❌)
    해설: 관계대수에는 SELECT(σ), PROJECT(π), JOIN(⨝) 등이 포함되며, 정렬은 관계대수에 포함되지 않음.

  - 번호: 16
    문제요약: GROUP BY와 함께 필수적으로 사용하는 것
    답: 2 (HAVING)
    정답: 3 (집계 함수)
    해설: GROUP BY는 집계 함수(SUM, COUNT 등)가 있을 때만 유효함. HAVING은 **선택적** 조건절.

  - 번호: 18
    문제요약: UPDATE 문 형식
    답: 4 (UPDATE 테이블명 VALUES ...)
    정답: 2 (UPDATE 테이블명 SET 컬럼 = 값)
    해설: `UPDATE 테이블명 SET 컬럼명 = 값 [WHERE 조건];`이 올바른 문법. VALUES는 INSERT에서 사용됨.

  - 번호: 19
    문제요약: 테이블의 모든 데이터 삭제 및 공간 반환
    답: 1 (DELETE)
    정답: 3 (TRUNCATE)
    해설: DELETE는 데이터만 삭제, 구조는 유지. TRUNCATE는 **데이터 + 공간 초기화**까지 수행.

  - 번호: 20
    문제요약: 릴레이션(Relation)의 정의
    답: 1 (프로시저)
    정답: 3 (이차원 테이블)
    해설: 릴레이션은 행과 열로 구성된 **이차원 테이블**을 의미함.

  - 번호: 30
    문제요약: 복구 불가능한 테이블 삭제 명령
    답: 2 (TRUNCATE)
    정답: 3 (DROP)
    해설: TRUNCATE는 구조 유지됨. DROP은 테이블 **구조 + 데이터 완전 삭제**, 복구 불가.

  - 번호: 38
    문제요약: IN 연산자의 기능
    답: 2 (특정 값과 일치 확인)
    정답: 3 (여러 개 값 중 하나인지 확인)
    해설: `IN (값1, 값2, ...)`은 **지정된 여러 값 중 하나와 일치**하는지 확인할 때 사용.

  - 번호: 45
    문제요약: CROSS JOIN의 결과
    답: 1 (INNER JOIN과 같다)
    정답: 3 (모든 조합 생성)
    해설: CROSS JOIN은 조건 없이 두 테이블의 **모든 행 조합(데카르트 곱)** 생성. INNER JOIN과 전혀 다름.
